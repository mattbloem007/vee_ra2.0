{"version":3,"file":"component---src-template-product-js-73b591e5c3ce0be76c01.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/modern/ProductAccordion.js","webpack://gatsby-starter-default/./src/data/products/index.js","webpack://gatsby-starter-default/./src/template/product.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst ProductAccordion = ({ sections, productId }) => {\n  const [openSections, setOpenSections] = useState(new Set());\n\n  const toggleSection = (sectionKey) => {\n    const newOpenSections = new Set(openSections);\n    if (newOpenSections.has(sectionKey)) {\n      newOpenSections.delete(sectionKey);\n    } else {\n      newOpenSections.add(sectionKey);\n    }\n    setOpenSections(newOpenSections);\n  };\n\n  const isOpen = (sectionKey) => openSections.has(sectionKey);\n\n  return (\n    <div className=\"product-accordion\">\n      {Object.entries(sections).map(([sectionKey, section]) => (\n        <div key={sectionKey} className=\"product-accordion__item\">\n          <button\n            className={`product-accordion__header ${isOpen(sectionKey) ? 'product-accordion__header--open' : ''}`}\n            onClick={() => toggleSection(sectionKey)}\n            aria-expanded={isOpen(sectionKey)}\n            aria-controls={`product-accordion-content-${productId}-${sectionKey}`}\n          >\n            <span className=\"product-accordion__title\">{section.title}</span>\n            <span className=\"product-accordion__icon\">\n              {isOpen(sectionKey) ? '−' : '+'}\n            </span>\n          </button>\n          \n          <div\n            id={`product-accordion-content-${productId}-${sectionKey}`}\n            className={`product-accordion__content ${isOpen(sectionKey) ? 'product-accordion__content--open' : ''}`}\n            aria-hidden={!isOpen(sectionKey)}\n          >\n            <div className=\"product-accordion__body\">\n              {section.content.split('\\n').map((paragraph, index) => (\n                <p key={index}>\n                  {paragraph}\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ProductAccordion;\n","import moodMagick from './mood-magick.json';\nimport moonMylk from './moon-mylk.json';\nimport rr from './rr.json';\n\nexport const products = {\n  'mood-magick': moodMagick,\n  'moon-mylk': moonMylk,\n  'rr': rr,\n  'ritual-roots': rr,  // Add the full handle as well\n  'ritual-roots-blend': rr,  // Common variations\n  'ritual-roots-product': rr\n};\n\nexport const getProductData = (productId) => {\n  return products[productId] || null;\n};\n\nexport default products;\n","import React, { useEffect, useState } from 'react';\r\nimport { graphql, Link } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\nimport { useStore } from \"../context/StoreContext\";\r\nimport ProductAccordion from \"../components/modern/ProductAccordion\";\r\nimport { getProductData } from \"../data/products\";\r\n\r\nconst Product = (props) => {\r\n    const data = props.data;\r\n    const [selectedVariant, setSelectedVariant] = useState(null);\r\n    const [quantity, setQuantity] = useState(1);\r\n    const [isAddingToCart, setIsAddingToCart] = useState(false);\r\n    const [addedToCart, setAddedToCart] = useState(false);\r\n    const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n    const { addToCart } = useStore();\r\n\r\n    // Get product data for accordion sections\r\n    const productId = data.shopifyProduct.handle || data.shopifyProduct.title.toLowerCase().replace(/\\s+/g, '-');\r\n    let productData = getProductData(productId);\r\n    \r\n    // If no product data found, try to find by title variations\r\n    if (!productData) {\r\n      const title = data.shopifyProduct.title.toLowerCase();\r\n      if (title.includes('ritual') || title.includes('roots')) {\r\n        productData = getProductData('rr');\r\n      } else if (title.includes('mood') || title.includes('magick')) {\r\n        productData = getProductData('mood-magick');\r\n      } else if (title.includes('moon') || title.includes('mylk')) {\r\n        productData = getProductData('moon-mylk');\r\n      }\r\n    }\r\n    \r\n    // Debug logging\r\n    console.log('Product handle:', data.shopifyProduct.handle);\r\n    console.log('Product title:', data.shopifyProduct.title);\r\n    console.log('Generated product ID:', productId);\r\n    console.log('Found product data:', productData);\r\n\r\n    // Get all product images including featured image and media\r\n    const productImages = React.useMemo(() => {\r\n        const images = [];\r\n        \r\n        // Add featured image if it exists\r\n        if (data.shopifyProduct.featuredImage) {\r\n            images.push({\r\n                id: 'featured',\r\n                image: data.shopifyProduct.featuredImage.gatsbyImageData,\r\n                alt: data.shopifyProduct.title\r\n            });\r\n        }\r\n        \r\n        // Add media images if they exist\r\n        if (data.shopifyProduct.media && data.shopifyProduct.media.length > 0) {\r\n            data.shopifyProduct.media.forEach((mediaItem, index) => {\r\n                if (mediaItem.preview && mediaItem.preview.image) {\r\n                    images.push({\r\n                        id: `media-${index}`,\r\n                        image: mediaItem.preview.image.gatsbyImageData,\r\n                        alt: `${data.shopifyProduct.title} - Image ${index + 1}`\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        \r\n        return images;\r\n    }, [data.shopifyProduct]);\r\n\r\n    useEffect(() => {\r\n        if (data.shopifyProduct.variants.length === 1) {\r\n            setSelectedVariant(data.shopifyProduct.variants[0]);\r\n        }\r\n    }, [data]);\r\n\r\n    const handleVariantChange = (e) => {\r\n        const variant = data.shopifyProduct.variants.find(v => v.title === e.target.value);\r\n        setSelectedVariant(variant);\r\n    };\r\n\r\n    const handleQuantityChange = (e) => {\r\n        const newQuantity = parseInt(e.target.value);\r\n        if (newQuantity > 0) {\r\n            setQuantity(newQuantity);\r\n        }\r\n    };\r\n\r\n    const handleAddToCart = async () => {\r\n        if (!selectedVariant) return;\r\n\r\n        setIsAddingToCart(true);\r\n        try {\r\n            await addToCart(selectedVariant.storefrontId, quantity);\r\n            setAddedToCart(true);\r\n            setTimeout(() => setAddedToCart(false), 3000);\r\n        } catch (error) {\r\n            console.error(\"Failed to add item to cart:\", error);\r\n        } finally {\r\n            setIsAddingToCart(false);\r\n        }\r\n    };\r\n\r\n    const formatPrice = (price) => {\r\n        return `R${parseFloat(price).toFixed(2)}`;\r\n    };\r\n\r\n    const nextImage = () => {\r\n        setCurrentImageIndex((prev) => \r\n            prev === productImages.length - 1 ? 0 : prev + 1\r\n        );\r\n    };\r\n\r\n    const prevImage = () => {\r\n        setCurrentImageIndex((prev) => \r\n            prev === 0 ? productImages.length - 1 : prev - 1\r\n        );\r\n    };\r\n\r\n    const goToImage = (index) => {\r\n        setCurrentImageIndex(index);\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <div className=\"product-page\">\r\n                <div className=\"container\">\r\n                    {/* Breadcrumb */}\r\n                    <nav className=\"breadcrumb\">\r\n                        <Link to=\"/\" className=\"breadcrumb__link\">Home</Link>\r\n                        <span className=\"breadcrumb__separator\">/</span>\r\n                        <Link to=\"/store\" className=\"breadcrumb__link\">Shop</Link>\r\n                        <span className=\"breadcrumb__separator\">/</span>\r\n                        <span className=\"breadcrumb__current\">{data.shopifyProduct.title}</span>\r\n                    </nav>\r\n\r\n                    <div className=\"product-grid\">\r\n                        {/* Product Image Gallery */}\r\n                        <div className=\"product-images\">\r\n                            {productImages.length > 0 && (\r\n                                <div className=\"product-gallery\">\r\n                                    {/* Main Image */}\r\n                                    <div className=\"product-gallery__main\">\r\n                                        <GatsbyImage \r\n                                            image={productImages[currentImageIndex].image}\r\n                                            alt={productImages[currentImageIndex].alt}\r\n                                            className=\"product-gallery__image\"\r\n                                        />\r\n                                        \r\n                                        {/* Navigation Arrows */}\r\n                                        {productImages.length > 1 && (\r\n                                            <>\r\n                                                <button \r\n                                                    className=\"product-gallery__nav product-gallery__nav--prev\"\r\n                                                    onClick={prevImage}\r\n                                                    aria-label=\"Previous image\"\r\n                                                >\r\n                                                    ‹\r\n                                                </button>\r\n                                                <button \r\n                                                    className=\"product-gallery__nav product-gallery__nav--next\"\r\n                                                    onClick={nextImage}\r\n                                                    aria-label=\"Next image\"\r\n                                                >\r\n                                                    ›\r\n                                                </button>\r\n                                            </>\r\n                                        )}\r\n                                        \r\n                                        {/* Image Counter */}\r\n                                        {productImages.length > 1 && (\r\n                                            <div className=\"product-gallery__counter\">\r\n                                                {currentImageIndex + 1} / {productImages.length}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    \r\n                                    {/* Thumbnail Navigation */}\r\n                                    {productImages.length > 1 && (\r\n                                        <div className=\"product-gallery__thumbnails\">\r\n                                            {productImages.map((image, index) => (\r\n                                                <button\r\n                                                    key={image.id}\r\n                                                    className={`product-gallery__thumbnail ${index === currentImageIndex ? 'product-gallery__thumbnail--active' : ''}`}\r\n                                                    onClick={() => goToImage(index)}\r\n                                                    aria-label={`Go to image ${index + 1}`}\r\n                                                >\r\n                                                    <GatsbyImage \r\n                                                        image={image.image}\r\n                                                        alt={image.alt}\r\n                                                        className=\"product-gallery__thumbnail-image\"\r\n                                                    />\r\n                                                </button>\r\n                                            ))}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Product Details */}\r\n                        <div className=\"product-details\">\r\n                            <h1 className=\"product-title\">{data.shopifyProduct.title}</h1>\r\n                            \r\n                            {selectedVariant && (\r\n                                <div className=\"product-price\">\r\n                                    {formatPrice(selectedVariant.price * quantity)}\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Variant Selection */}\r\n                            {data.shopifyProduct.variants.length > 1 && (\r\n                                <div className=\"product-variants\">\r\n                                    <label className=\"product-variants__label\">Size</label>\r\n                                    <div className=\"product-variants__options\">\r\n                                        {data.shopifyProduct.variants.map((variant) => (\r\n                                            <button\r\n                                                key={variant.storefrontId}\r\n                                                className={`product-variants__option ${selectedVariant?.storefrontId === variant.storefrontId ? 'product-variants__option--selected' : ''} ${variant.inventoryQuantity <= 0 ? 'product-variants__option--disabled' : ''} ${variant.inventoryQuantity <= 3 && variant.inventoryQuantity > 0 ? 'product-variants__option--low-stock' : ''}`}\r\n                                                onClick={() => setSelectedVariant(variant)}\r\n                                                disabled={variant.inventoryQuantity <= 0}\r\n                                                type=\"button\"\r\n                                            >\r\n                                                <div className=\"product-variants__option-content\">\r\n                                                    <span className=\"product-variants__option-title\">{variant.title}</span>\r\n                                                    <span className=\"product-variants__option-price\">{formatPrice(variant.price)}</span>\r\n                                                </div>\r\n                                                \r\n                                                {/* Stock Status Indicators */}\r\n                                                {variant.inventoryQuantity <= 0 ? (\r\n                                                    <span className=\"product-variants__option-out-of-stock\">Out of Stock</span>\r\n                                                ) : variant.inventoryQuantity <= 3 ? (\r\n                                                    <span className=\"product-variants__option-low-stock\">\r\n                                                        Low Stock ({variant.inventoryQuantity})\r\n                                                    </span>\r\n                                                ) : null}\r\n                                            </button>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Out of Stock Notice */}\r\n                            {selectedVariant && selectedVariant.inventoryQuantity <= 0 && (\r\n                                <div className=\"product-out-of-stock\">\r\n                                    <span className=\"product-out-of-stock__icon\">⚠️</span>\r\n                                    <span className=\"product-out-of-stock__text\">This variant is out of stock</span>\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Quantity */}\r\n                            <div className=\"product-quantity\">\r\n                                <label className=\"product-quantity__label\">Quantity</label>\r\n                                <div className=\"product-quantity__selector\">\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"product-quantity__btn product-quantity__btn--decrease\"\r\n                                        onClick={() => setQuantity(Math.max(1, quantity - 1))}\r\n                                        disabled={quantity <= 1 || (selectedVariant && selectedVariant.inventoryQuantity <= 0)}\r\n                                        aria-label=\"Decrease quantity\"\r\n                                    >\r\n                                        −\r\n                                    </button>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        min=\"1\"\r\n                                        max={selectedVariant ? selectedVariant.inventoryQuantity : 1}\r\n                                        value={quantity}\r\n                                        onChange={handleQuantityChange}\r\n                                        className=\"product-quantity__input\"\r\n                                        disabled={selectedVariant && selectedVariant.inventoryQuantity <= 0}\r\n                                        aria-label=\"Quantity\"\r\n                                    />\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"product-quantity__btn product-quantity__btn--increase\"\r\n                                        onClick={() => setQuantity(quantity + 1)}\r\n                                        disabled={selectedVariant && (quantity >= selectedVariant.inventoryQuantity || selectedVariant.inventoryQuantity <= 0)}\r\n                                        aria-label=\"Increase quantity\"\r\n                                    >\r\n                                        +\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* Add to Cart Button */}\r\n                            <button\r\n                                className={`btn btn--primary product-add-to-cart ${isAddingToCart ? 'btn--loading' : ''}`}\r\n                                onClick={handleAddToCart}\r\n                                disabled={!selectedVariant || isAddingToCart || (selectedVariant && selectedVariant.inventoryQuantity <= 0)}\r\n                            >\r\n                                {isAddingToCart ? 'Adding...' : \r\n                                 selectedVariant && selectedVariant.inventoryQuantity <= 0 ? 'Out of Stock' : 'Add to Cart'}\r\n                            </button>\r\n\r\n                            {addedToCart && (\r\n                                <div className=\"product-added-message\">\r\n                                    ✓ Added to cart\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Product Description */}\r\n                            {data.shopifyProduct.descriptionHtml && (\r\n                                <div className=\"product-description\">\r\n                                    <h3>About this blend</h3>\r\n                                    <div \r\n                                        dangerouslySetInnerHTML={{ __html: data.shopifyProduct.descriptionHtml }}\r\n                                        className=\"product-description__content\"\r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {/* Product Accordion Sections */}\r\n                            {productData && (\r\n                                <div className=\"product-sections\">\r\n                                    <ProductAccordion \r\n                                        sections={productData.sections} \r\n                                        productId={productData.id}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport const query = graphql`\r\n    query ProductQuery($id: String!) {\r\n        shopifyProduct(shopifyId: {eq: $id}) {\r\n            title\r\n            handle\r\n            descriptionHtml\r\n            storefrontId\r\n            id\r\n            featuredImage {\r\n                gatsbyImageData\r\n            }\r\n            media {\r\n                preview {\r\n                    image {\r\n                        gatsbyImageData\r\n                        src\r\n                    }\r\n                }\r\n            }\r\n            variants {\r\n                price\r\n                title\r\n                storefrontId\r\n                inventoryQuantity\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default Product;\r\n"],"names":["_ref","sections","productId","openSections","setOpenSections","useState","Set","isOpen","sectionKey","has","React","className","Object","entries","map","_ref2","section","key","onClick","newOpenSections","delete","add","toggleSection","title","id","content","split","paragraph","index","products","moodMagick","moonMylk","rr","getProductData","props","data","selectedVariant","setSelectedVariant","quantity","setQuantity","isAddingToCart","setIsAddingToCart","addedToCart","setAddedToCart","currentImageIndex","setCurrentImageIndex","addToCart","useStore","shopifyProduct","handle","toLowerCase","replace","productData","includes","console","log","productImages","images","featuredImage","push","image","gatsbyImageData","alt","media","length","forEach","mediaItem","preview","useEffect","variants","formatPrice","price","parseFloat","toFixed","Layout","Link","to","GatsbyImage","prevImage","prev","nextImage","goToImage","variant","storefrontId","inventoryQuantity","disabled","type","Math","max","min","value","onChange","e","newQuantity","parseInt","target","async","setTimeout","error","descriptionHtml","dangerouslySetInnerHTML","__html","ProductAccordion"],"sourceRoot":""}